# See options here: https://github.com/yetibot/core/blob/master/config/sample.env and in chart itself
yetibot:
  # Overriding fullname so we KNOW the name of the secret we must create to store secret env vars
  fullnameOverride: "yetibot"
  yetibot:
    service:
      type: ClusterIP
    env:
      # In the context of running on Kuberenetes, we must ensure Yetibot ignores
      # all `YETIBOT_` env vars, since by convention Kubernetes will expose a
      # bunch of them inside the pod, unrelated to Yetibot's own config. If we
      # don't override the env prefix, Yetibot will throw exceptions at runtime
      # and the pod will CrashLoop.
      YETIBOT_ENV_PREFIX: yb
      YB_DB_URL: "jdbc:postgresql://yetibot:yetibot@yetibot-postgresql:5432/yetibot"

      # Enable Mattermost adapter
      # YETIBOT_ADAPTERS_MYMATTERMOST_TYPE: "mattermost"
      # YETIBOT_ADAPTERS_MYMATTERMOST_HOST: "chat.obmondo.com"
      # This is delivered by sealed-secrets
      # YETIBOT_ADAPTERS_MYMATTERMOST_TOKEN: ""
      # YETIBOT_ADAPTERS_MYMATTERMOST_SECURE: "true" # true by default
      YB_URL: "http://localhost:3003"

      # disabling this - allows for a readonlyfilesystem (in security options below)
      YB_LOG_ROLLING_ENABLED: "false"

#  ingress:
#    enabled: true
#    annotations:
#      cert-manager.io/cluster-issuer: letsencrypt
#    hosts:
#    - yetibot.kam.obmondo.com
#    tls:
#    - secretName: yetibot.kam.obmondo.com-cert
#      hosts:
#      - yetibot.kam.obmondo.com

#  podSecurityContext:
#    fsGroup: 2000
#  securityContext:
#    capabilities:
#      drop:
#      - ALL
#    readOnlyRootFilesystem: false
#    runAsNonRoot: true
#    runAsUser: 1000
